package SingleLL_Problems;import java.util.Scanner;class Student {    int rollNumber;    String name;    int age;    char grade;    Student next;    public Student(int rollNumber, String name, int age, char grade) {        this.rollNumber = rollNumber;        this.name = name;        this.age = age;        this.grade = grade;        this.next = null;    }}class StudentLinkedList {    private Student head;    // Add at beginning    public void addAtBeginning(int rollNumber, String name, int age, char grade) {        Student newStudent = new Student(rollNumber, name, age, grade);        newStudent.next = head;        head = newStudent;    }    // Add at end    public void addAtEnd(int rollNumber, String name, int age, char grade) {        Student newStudent = new Student(rollNumber, name, age, grade);        if (head == null) {            head = newStudent;            return;        }        Student temp = head;        while (temp.next != null) {            temp = temp.next;        }        temp.next = newStudent;    }    // Add at specific position (1-based index)    public void addAtPosition(int position, int rollNumber, String name, int age, char grade) {        if (position <= 0) {            System.out.println("Invalid position.");            return;        }        if (position == 1) {            addAtBeginning(rollNumber, name, age, grade);            return;        }        Student newStudent = new Student(rollNumber, name, age, grade);        Student temp = head;        for (int i = 1; i < position - 1 && temp != null; i++) {            temp = temp.next;        }        if (temp == null) {            System.out.println("Position out of bounds.");            return;        }        newStudent.next = temp.next;        temp.next = newStudent;    }    // Delete by Roll Number    public void deleteByRollNumber(int rollNumber) {        if (head == null) {            System.out.println("List is empty.");            return;        }        if (head.rollNumber == rollNumber) {            head = head.next;            System.out.println("Student deleted.");            return;        }        Student temp = head;        while (temp.next != null && temp.next.rollNumber != rollNumber) {            temp = temp.next;        }        if (temp.next == null) {            System.out.println("Student not found.");        } else {            temp.next = temp.next.next;            System.out.println("Student deleted.");        }    }    // Search by Roll Number    public void searchByRollNumber(int rollNumber) {        Student temp = head;        while (temp != null) {            if (temp.rollNumber == rollNumber) {                System.out.println("Student Found: " + temp.name + ", Age: " + temp.age + ", Grade: " + temp.grade);                return;            }            temp = temp.next;        }        System.out.println("Student not found.");    }    // Update grade by Roll Number    public void updateGrade(int rollNumber, char newGrade) {        Student temp = head;        while (temp != null) {            if (temp.rollNumber == rollNumber) {                temp.grade = newGrade;                System.out.println("Grade updated.");                return;            }            temp = temp.next;        }        System.out.println("Student not found.");    }    // Display all student records    public void displayAll() {        if (head == null) {            System.out.println("No student records.");            return;        }        Student temp = head;        while (temp != null) {            System.out.println("Roll No: " + temp.rollNumber + ", Name: " + temp.name +                    ", Age: " + temp.age + ", Grade: " + temp.grade);            temp = temp.next;        }    }}public class StudentManagementSystem {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        StudentLinkedList list = new StudentLinkedList();        while (true) {            System.out.println("\n--- Student Record System ---");            System.out.println("1. Add Student at Beginning");            System.out.println("2. Add Student at End");            System.out.println("3. Add Student at Position");            System.out.println("4. Delete Student by Roll Number");            System.out.println("5. Search Student by Roll Number");            System.out.println("6. Update Grade by Roll Number");            System.out.println("7. Display All Students");            System.out.println("8. Exit");            System.out.print("Enter choice: ");            int choice = sc.nextInt();            switch (choice) {                case 1:                case 2:                case 3:                    System.out.print("Enter Roll Number: ");                    int roll = sc.nextInt();                    sc.nextLine(); // Consume newline                    System.out.print("Enter Name: ");                    String name = sc.nextLine();                    System.out.print("Enter Age: ");                    int age = sc.nextInt();                    System.out.print("Enter Grade (A-F): ");                    char grade = sc.next().charAt(0);                    if (choice == 1)                        list.addAtBeginning(roll, name, age, grade);                    else if (choice == 2)                        list.addAtEnd(roll, name, age, grade);                    else {                        System.out.print("Enter Position: ");                        int pos = sc.nextInt();                        list.addAtPosition(pos, roll, name, age, grade);                    }                    break;                case 4:                    System.out.print("Enter Roll Number to delete: ");                    int delRoll = sc.nextInt();                    list.deleteByRollNumber(delRoll);                    break;                case 5:                    System.out.print("Enter Roll Number to search: ");                    int searchRoll = sc.nextInt();                    list.searchByRollNumber(searchRoll);                    break;                case 6:                    System.out.print("Enter Roll Number to update grade: ");                    int updateRoll = sc.nextInt();                    System.out.print("Enter New Grade: ");                    char newGrade = sc.next().charAt(0);                    list.updateGrade(updateRoll, newGrade);                    break;                case 7:                    list.displayAll();                    break;                case 8:                    System.out.println("Exiting...");                    return;                default:                    System.out.println("Invalid choice.");            }        }    }}