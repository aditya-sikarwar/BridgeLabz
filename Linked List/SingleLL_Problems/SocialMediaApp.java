package SingleLL_Problems;import java.util.*;class User {    int userId;    String name;    int age;    ArrayList<Integer> friendIds;    User next;    User(int userId, String name, int age) {        this.userId = userId;        this.name = name;        this.age = age;        this.friendIds = new ArrayList<>();        this.next = null;    }}class SocialNetwork {    private User head;    // Add new user to the network    public void addUser(int id, String name, int age) {        if (getUserById(id) != null) {            System.out.println("User ID already exists.");            return;        }        User newUser = new User(id, name, age);        newUser.next = head;        head = newUser;        System.out.println("User added.");    }    // Get user by ID    private User getUserById(int id) {        User temp = head;        while (temp != null) {            if (temp.userId == id) return temp;            temp = temp.next;        }        return null;    }    // Add friend connection between two users    public void addFriendConnection(int id1, int id2) {        User user1 = getUserById(id1);        User user2 = getUserById(id2);        if (user1 == null || user2 == null) {            System.out.println("One or both users not found.");            return;        }        if (!user1.friendIds.contains(id2)) user1.friendIds.add(id2);        if (!user2.friendIds.contains(id1)) user2.friendIds.add(id1);        System.out.println("Friend connection added.");    }    // Remove friend connection    public void removeFriendConnection(int id1, int id2) {        User user1 = getUserById(id1);        User user2 = getUserById(id2);        if (user1 == null || user2 == null) {            System.out.println("One or both users not found.");            return;        }        user1.friendIds.remove((Integer) id2);        user2.friendIds.remove((Integer) id1);        System.out.println("Friend connection removed.");    }    // Display all friends of a user    public void displayFriends(int id) {        User user = getUserById(id);        if (user == null) {            System.out.println("User not found.");            return;        }        System.out.println(user.name + "'s friends:");        for (int fid : user.friendIds) {            User friend = getUserById(fid);            if (friend != null) {                System.out.println("- " + friend.name + " (ID: " + friend.userId + ")");            }        }    }    // Find mutual friends    public void mutualFriends(int id1, int id2) {        User user1 = getUserById(id1);        User user2 = getUserById(id2);        if (user1 == null || user2 == null) {            System.out.println("One or both users not found.");            return;        }        System.out.println("Mutual Friends:");        for (int f1 : user1.friendIds) {            if (user2.friendIds.contains(f1)) {                User mutual = getUserById(f1);                if (mutual != null)                    System.out.println("- " + mutual.name + " (ID: " + mutual.userId + ")");            }        }    }    // Search user by ID or Name    public void searchUser(String query) {        User temp = head;        boolean found = false;        while (temp != null) {            if (String.valueOf(temp.userId).equals(query) || temp.name.equalsIgnoreCase(query)) {                System.out.println("Found: " + temp.name + ", ID: " + temp.userId + ", Age: " + temp.age);                found = true;            }            temp = temp.next;        }        if (!found) System.out.println("User not found.");    }    // Count number of friends for each user    public void countFriends() {        User temp = head;        while (temp != null) {            System.out.println(temp.name + " has " + temp.friendIds.size() + " friends.");            temp = temp.next;        }    }    // Display all users    public void displayAllUsers() {        User temp = head;        if (temp == null) {            System.out.println("No users in the network.");            return;        }        System.out.println("All users:");        while (temp != null) {            System.out.println("- " + temp.name + " (ID: " + temp.userId + ", Age: " + temp.age + ")");            temp = temp.next;        }    }}public class SocialMediaApp {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        SocialNetwork network = new SocialNetwork();        while (true) {            System.out.println("\n--- Social Media Menu ---");            System.out.println("1. Add User");            System.out.println("2. Add Friend Connection");            System.out.println("3. Remove Friend Connection");            System.out.println("4. Display Friends of User");            System.out.println("5. Find Mutual Friends");            System.out.println("6. Search User by ID or Name");            System.out.println("7. Count Friends");            System.out.println("8. Show All Users");            System.out.println("9. Exit");            System.out.print("Enter choice: ");            int choice = sc.nextInt();            if (choice == 1) {                System.out.print("Enter ID: ");                int id = sc.nextInt();                sc.nextLine();                System.out.print("Enter Name: ");                String name = sc.nextLine();                System.out.print("Enter Age: ");                int age = sc.nextInt();                network.addUser(id, name, age);            } else if (choice == 2) {                System.out.print("Enter first user ID: ");                int id1 = sc.nextInt();                System.out.print("Enter second user ID: ");                int id2 = sc.nextInt();                network.addFriendConnection(id1, id2);            } else if (choice == 3) {                System.out.print("Enter first user ID: ");                int id1 = sc.nextInt();                System.out.print("Enter second user ID: ");                int id2 = sc.nextInt();                network.removeFriendConnection(id1, id2);            } else if (choice == 4) {                System.out.print("Enter user ID: ");                int id = sc.nextInt();                network.displayFriends(id);            } else if (choice == 5) {                System.out.print("Enter first user ID: ");                int id1 = sc.nextInt();                System.out.print("Enter second user ID: ");                int id2 = sc.nextInt();                network.mutualFriends(id1, id2);            } else if (choice == 6) {                sc.nextLine();                System.out.print("Enter ID or Name: ");                String query = sc.nextLine();                network.searchUser(query);            } else if (choice == 7) {                network.countFriends();            } else if (choice == 8) {                network.displayAllUsers();            } else if (choice == 9) {                System.out.println("Exiting...");                break;            } else {                System.out.println("Invalid choice.");            }        }        sc.close();    }}