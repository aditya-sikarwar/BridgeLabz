package SingleLL_Problems;import java.util.Scanner;class Item {    String name;    int id;    int quantity;    double price;    Item next;    public Item(String name, int id, int quantity, double price) {        this.name = name;        this.id = id;        this.quantity = quantity;        this.price = price;        this.next = null;    }}class Inventory {    private Item head;    // Add at beginning    public void addAtBeginning(String name, int id, int quantity, double price) {        Item newItem = new Item(name, id, quantity, price);        newItem.next = head;        head = newItem;    }    // Add at end    public void addAtEnd(String name, int id, int quantity, double price) {        Item newItem = new Item(name, id, quantity, price);        if (head == null) {            head = newItem;            return;        }        Item temp = head;        while (temp.next != null) {            temp = temp.next;        }        temp.next = newItem;    }    // Add at specific position    public void addAtPosition(int position, String name, int id, int quantity, double price) {        if (position <= 0) {            System.out.println("Invalid position.");            return;        }        if (position == 1) {            addAtBeginning(name, id, quantity, price);            return;        }        Item newItem = new Item(name, id, quantity, price);        Item temp = head;        for (int i = 1; i < position - 1 && temp != null; i++) {            temp = temp.next;        }        if (temp == null) {            System.out.println("Position out of bounds.");            return;        }        newItem.next = temp.next;        temp.next = newItem;    }    // Remove item by ID    public void removeById(int id) {        if (head == null) {            System.out.println("Inventory is empty.");            return;        }        if (head.id == id) {            head = head.next;            System.out.println("Item removed.");            return;        }        Item temp = head;        while (temp.next != null && temp.next.id != id) {            temp = temp.next;        }        if (temp.next == null) {            System.out.println("Item not found.");        } else {            temp.next = temp.next.next;            System.out.println("Item removed.");        }    }    // Update quantity by ID    public void updateQuantity(int id, int newQuantity) {        Item temp = head;        while (temp != null) {            if (temp.id == id) {                temp.quantity = newQuantity;                System.out.println("Quantity updated.");                return;            }            temp = temp.next;        }        System.out.println("Item not found.");    }    // Search by ID or Name    public void searchItem(String query) {        boolean found = false;        Item temp = head;        while (temp != null) {            if (String.valueOf(temp.id).equals(query) || temp.name.equalsIgnoreCase(query)) {                System.out.println("Found -> ID: " + temp.id + ", Name: " + temp.name +                        ", Qty: " + temp.quantity + ", Price: " + temp.price);                found = true;            }            temp = temp.next;        }        if (!found) {            System.out.println("Item not found.");        }    }    // Display all items    public void displayAll() {        if (head == null) {            System.out.println("Inventory is empty.");            return;        }        Item temp = head;        System.out.println("Current Inventory:");        while (temp != null) {            System.out.println("ID: " + temp.id + ", Name: " + temp.name +                    ", Qty: " + temp.quantity + ", Price: " + temp.price);            temp = temp.next;        }    }    // Calculate total inventory value    public void calculateTotalValue() {        double total = 0;        Item temp = head;        while (temp != null) {            total += temp.price * temp.quantity;            temp = temp.next;        }        System.out.println("Total Inventory Value: â‚¹" + total);    }    // Sort using Bubble Sort    public void bubbleSort(String sortBy, boolean ascending) {        if (head == null || head.next == null) return;        boolean swapped;        do {            swapped = false;            Item current = head;            while (current.next != null) {                boolean shouldSwap = false;                if (sortBy.equalsIgnoreCase("name")) {                    int cmp = current.name.compareToIgnoreCase(current.next.name);                    shouldSwap = ascending ? cmp > 0 : cmp < 0;                } else if (sortBy.equalsIgnoreCase("price")) {                    shouldSwap = ascending ? current.price > current.next.price : current.price < current.next.price;                }                if (shouldSwap) {                    // Swap data                    String tempName = current.name;                    int tempId = current.id;                    int tempQty = current.quantity;                    double tempPrice = current.price;                    current.name = current.next.name;                    current.id = current.next.id;                    current.quantity = current.next.quantity;                    current.price = current.next.price;                    current.next.name = tempName;                    current.next.id = tempId;                    current.next.quantity = tempQty;                    current.next.price = tempPrice;                    swapped = true;                }                current = current.next;            }        } while (swapped);        System.out.println("Inventory sorted by " + sortBy + " (" + (ascending ? "asc" : "desc") + ").");    }}public class InventorySystem {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        Inventory inventory = new Inventory();        while (true) {            System.out.println("\n--- Inventory Management System ---");            System.out.println("1. Add Item at Beginning");            System.out.println("2. Add Item at End");            System.out.println("3. Add Item at Position");            System.out.println("4. Remove Item by ID");            System.out.println("5. Update Quantity by ID");            System.out.println("6. Search Item by ID or Name");            System.out.println("7. Display All Items");            System.out.println("8. Calculate Total Inventory Value");            System.out.println("9. Sort Inventory");            System.out.println("10. Exit");            System.out.print("Enter choice: ");            int choice = sc.nextInt();            String name;            int id, qty, pos;            double price;            switch (choice) {                case 1:                case 2:                case 3:                    System.out.print("Enter Item Name: ");                    sc.nextLine();                    name = sc.nextLine();                    System.out.print("Enter Item ID: ");                    id = sc.nextInt();                    System.out.print("Enter Quantity: ");                    qty = sc.nextInt();                    System.out.print("Enter Price: ");                    price = sc.nextDouble();                    if (choice == 1)                        inventory.addAtBeginning(name, id, qty, price);                    else if (choice == 2)                        inventory.addAtEnd(name, id, qty, price);                    else {                        System.out.print("Enter Position: ");                        pos = sc.nextInt();                        inventory.addAtPosition(pos, name, id, qty, price);                    }                    break;                case 4:                    System.out.print("Enter Item ID to remove: ");                    id = sc.nextInt();                    inventory.removeById(id);                    break;                case 5:                    System.out.print("Enter Item ID to update quantity: ");                    id = sc.nextInt();                    System.out.print("Enter new quantity: ");                    qty = sc.nextInt();                    inventory.updateQuantity(id, qty);                    break;                case 6:                    System.out.print("Enter Item ID or Name to search: ");                    sc.nextLine();                    String query = sc.nextLine();                    inventory.searchItem(query);                    break;                case 7:                    inventory.displayAll();                    break;                case 8:                    inventory.calculateTotalValue();                    break;                case 9:                    sc.nextLine();                    System.out.print("Sort by (name/price): ");                    String sortBy = sc.nextLine();                    System.out.print("Ascending? (true/false): ");                    boolean asc = sc.nextBoolean();                    inventory.bubbleSort(sortBy, asc);                    break;                case 10:                    System.out.println("Exiting...");                    return;                default:                    System.out.println("Invalid choice.");            }        }    }}