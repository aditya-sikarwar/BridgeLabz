package DoublyLL_Problems;import java.util.Scanner;class Movie {    String title;    String director;    int year;    double rating;    Movie next, prev;    public Movie(String title, String director, int year, double rating) {        this.title = title;        this.director = director;        this.year = year;        this.rating = rating;        this.next = null;        this.prev = null;    }}class MovieManager {    private Movie head = null;    private Movie tail = null;    // Add at beginning    public void addAtBeginning(String title, String director, int year, double rating) {        Movie newMovie = new Movie(title, director, year, rating);        if (head == null) {            head = tail = newMovie;        } else {            newMovie.next = head;            head.prev = newMovie;            head = newMovie;        }        System.out.println("Movie added at beginning.");    }    // Add at end    public void addAtEnd(String title, String director, int year, double rating) {        Movie newMovie = new Movie(title, director, year, rating);        if (tail == null) {            head = tail = newMovie;        } else {            tail.next = newMovie;            newMovie.prev = tail;            tail = newMovie;        }        System.out.println("Movie added at end.");    }    // Add at specific position    public void addAtPosition(int pos, String title, String director, int year, double rating) {        if (pos <= 1 || head == null) {            addAtBeginning(title, director, year, rating);            return;        }        Movie newMovie = new Movie(title, director, year, rating);        Movie temp = head;        for (int i = 1; i < pos - 1 && temp != null; i++) {            temp = temp.next;        }        if (temp == null || temp.next == null) {            addAtEnd(title, director, year, rating);        } else {            newMovie.next = temp.next;            newMovie.prev = temp;            temp.next.prev = newMovie;            temp.next = newMovie;            System.out.println("Movie added at position " + pos);        }    }    // Remove movie by title    public void removeByTitle(String title) {        if (head == null) {            System.out.println("List is empty.");            return;        }        Movie temp = head;        while (temp != null && !temp.title.equalsIgnoreCase(title)) {            temp = temp.next;        }        if (temp == null) {            System.out.println("Movie not found.");            return;        }        if (temp == head) {            head = head.next;            if (head != null) head.prev = null;        } else if (temp == tail) {            tail = tail.prev;            if (tail != null) tail.next = null;        } else {            temp.prev.next = temp.next;            temp.next.prev = temp.prev;        }        System.out.println("Movie removed: " + title);    }    // Search by director or rating    public void search(String keyword) {        boolean found = false;        Movie temp = head;        while (temp != null) {            if (temp.director.equalsIgnoreCase(keyword) ||                    String.valueOf(temp.rating).equals(keyword)) {                System.out.println("Title: " + temp.title + ", Director: " + temp.director +                        ", Year: " + temp.year + ", Rating: " + temp.rating);                found = true;            }            temp = temp.next;        }        if (!found) System.out.println("No matching movies found.");    }    // Update rating by title    public void updateRating(String title, double newRating) {        Movie temp = head;        while (temp != null) {            if (temp.title.equalsIgnoreCase(title)) {                temp.rating = newRating;                System.out.println("Rating updated for: " + title);                return;            }            temp = temp.next;        }        System.out.println("Movie not found.");    }    // Display forward    public void displayForward() {        if (head == null) {            System.out.println("No movies to display.");            return;        }        System.out.println("Movies in forward order:");        Movie temp = head;        while (temp != null) {            printMovie(temp);            temp = temp.next;        }    }    // Display reverse    public void displayReverse() {        if (tail == null) {            System.out.println("No movies to display.");            return;        }        System.out.println("Movies in reverse order:");        Movie temp = tail;        while (temp != null) {            printMovie(temp);            temp = temp.prev;        }    }    private void printMovie(Movie m) {        System.out.println("Title: " + m.title + ", Director: " + m.director +                ", Year: " + m.year + ", Rating: " + m.rating);    }}public class MovieApp {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        MovieManager manager = new MovieManager();        while (true) {            System.out.println("\n--- Movie Management Menu ---");            System.out.println("1. Add Movie at Beginning");            System.out.println("2. Add Movie at End");            System.out.println("3. Add Movie at Position");            System.out.println("4. Remove Movie by Title");            System.out.println("5. Search Movie by Director or Rating");            System.out.println("6. Display Movies (Forward)");            System.out.println("7. Display Movies (Reverse)");            System.out.println("8. Update Movie Rating");            System.out.println("9. Exit");            System.out.print("Enter choice: ");            int choice = sc.nextInt();            if (choice == 9) {                System.out.println("Exiting...");                break;            }            sc.nextLine(); // consume newline            if (choice >= 1 && choice <= 3) {                System.out.print("Enter Title: ");                String title = sc.nextLine();                System.out.print("Enter Director: ");                String director = sc.nextLine();                System.out.print("Enter Year: ");                int year = sc.nextInt();                System.out.print("Enter Rating: ");                double rating = sc.nextDouble();                if (choice == 1)                    manager.addAtBeginning(title, director, year, rating);                else if (choice == 2)                    manager.addAtEnd(title, director, year, rating);                else {                    System.out.print("Enter Position: ");                    int pos = sc.nextInt();                    manager.addAtPosition(pos, title, director, year, rating);                }            } else if (choice == 4) {                System.out.print("Enter Title to Remove: ");                String title = sc.nextLine();                manager.removeByTitle(title);            } else if (choice == 5) {                System.out.print("Enter Director or Rating to Search: ");                String key = sc.nextLine();                manager.search(key);            } else if (choice == 6) {                manager.displayForward();            } else if (choice == 7) {                manager.displayReverse();            } else if (choice == 8) {                System.out.print("Enter Movie Title: ");                String title = sc.nextLine();                System.out.print("Enter New Rating: ");                double newRating = sc.nextDouble();                manager.updateRating(title, newRating);            } else {                System.out.println("Invalid choice.");            }        }    }}