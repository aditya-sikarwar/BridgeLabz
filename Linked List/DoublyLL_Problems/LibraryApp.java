package DoublyLL_Problems;import java.util.Scanner;class Book {    String title;    String author;    String genre;    int bookId;    boolean isAvailable;    Book prev, next;    public Book(String title, String author, String genre, int bookId, boolean isAvailable) {        this.title = title;        this.author = author;        this.genre = genre;        this.bookId = bookId;        this.isAvailable = isAvailable;        this.prev = null;        this.next = null;    }}class Library {    private Book head = null;    private Book tail = null;    // Add at beginning    public void addAtBeginning(String title, String author, String genre, int bookId, boolean isAvailable) {        Book newBook = new Book(title, author, genre, bookId, isAvailable);        if (head == null) {            head = tail = newBook;        } else {            newBook.next = head;            head.prev = newBook;            head = newBook;        }        System.out.println("Book added at beginning.");    }    // Add at end    public void addAtEnd(String title, String author, String genre, int bookId, boolean isAvailable) {        Book newBook = new Book(title, author, genre, bookId, isAvailable);        if (tail == null) {            head = tail = newBook;        } else {            tail.next = newBook;            newBook.prev = tail;            tail = newBook;        }        System.out.println("Book added at end.");    }    // Add at specific position    public void addAtPosition(int pos, String title, String author, String genre, int bookId, boolean isAvailable) {        if (pos <= 1 || head == null) {            addAtBeginning(title, author, genre, bookId, isAvailable);            return;        }        Book newBook = new Book(title, author, genre, bookId, isAvailable);        Book temp = head;        for (int i = 1; i < pos - 1 && temp != null; i++) {            temp = temp.next;        }        if (temp == null || temp.next == null) {            addAtEnd(title, author, genre, bookId, isAvailable);        } else {            newBook.next = temp.next;            newBook.prev = temp;            temp.next.prev = newBook;            temp.next = newBook;            System.out.println("Book added at position " + pos);        }    }    // Remove book by ID    public void removeById(int bookId) {        if (head == null) {            System.out.println("Library is empty.");            return;        }        Book temp = head;        while (temp != null && temp.bookId != bookId) {            temp = temp.next;        }        if (temp == null) {            System.out.println("Book not found.");            return;        }        if (temp == head) {            head = head.next;            if (head != null) head.prev = null;        } else if (temp == tail) {            tail = tail.prev;            if (tail != null) tail.next = null;        } else {            temp.prev.next = temp.next;            temp.next.prev = temp.prev;        }        System.out.println("Book removed: ID " + bookId);    }    // Search by Title or Author    public void search(String query) {        boolean found = false;        Book temp = head;        while (temp != null) {            if (temp.title.equalsIgnoreCase(query) || temp.author.equalsIgnoreCase(query)) {                printBook(temp);                found = true;            }            temp = temp.next;        }        if (!found) System.out.println("No matching books found.");    }    // Update availability    public void updateAvailability(int bookId, boolean status) {        Book temp = head;        while (temp != null) {            if (temp.bookId == bookId) {                temp.isAvailable = status;                System.out.println("Availability updated for book ID: " + bookId);                return;            }            temp = temp.next;        }        System.out.println("Book not found.");    }    // Display all books (forward)    public void displayForward() {        if (head == null) {            System.out.println("Library is empty.");            return;        }        System.out.println("Books in library (forward):");        Book temp = head;        while (temp != null) {            printBook(temp);            temp = temp.next;        }    }    // Display all books (reverse)    public void displayReverse() {        if (tail == null) {            System.out.println("Library is empty.");            return;        }        System.out.println("Books in library (reverse):");        Book temp = tail;        while (temp != null) {            printBook(temp);            temp = temp.prev;        }    }    // Count total books    public void countBooks() {        int count = 0;        Book temp = head;        while (temp != null) {            count++;            temp = temp.next;        }        System.out.println("Total books in library: " + count);    }    // Print a bookâ€™s details    private void printBook(Book b) {        System.out.println("ID: " + b.bookId + ", Title: " + b.title + ", Author: " + b.author +                ", Genre: " + b.genre + ", Available: " + (b.isAvailable ? "Yes" : "No"));    }}public class LibraryApp {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        Library library = new Library();        while (true) {            System.out.println("\n--- Library Menu ---");            System.out.println("1. Add Book at Beginning");            System.out.println("2. Add Book at End");            System.out.println("3. Add Book at Position");            System.out.println("4. Remove Book by ID");            System.out.println("5. Search Book by Title or Author");            System.out.println("6. Update Availability Status");            System.out.println("7. Display Books (Forward)");            System.out.println("8. Display Books (Reverse)");            System.out.println("9. Count Total Books");            System.out.println("10. Exit");            System.out.print("Enter your choice: ");            int choice = sc.nextInt();            if (choice == 10) {                System.out.println("Exiting...");                break;            }            sc.nextLine(); // consume newline            if (choice >= 1 && choice <= 3) {                System.out.print("Enter Title: ");                String title = sc.nextLine();                System.out.print("Enter Author: ");                String author = sc.nextLine();                System.out.print("Enter Genre: ");                String genre = sc.nextLine();                System.out.print("Enter Book ID: ");                int bookId = sc.nextInt();                System.out.print("Is Available? (true/false): ");                boolean status = sc.nextBoolean();                if (choice == 1)                    library.addAtBeginning(title, author, genre, bookId, status);                else if (choice == 2)                    library.addAtEnd(title, author, genre, bookId, status);                else {                    System.out.print("Enter Position: ");                    int pos = sc.nextInt();                    library.addAtPosition(pos, title, author, genre, bookId, status);                }            } else if (choice == 4) {                System.out.print("Enter Book ID to remove: ");                int bookId = sc.nextInt();                library.removeById(bookId);            } else if (choice == 5) {                System.out.print("Enter Title or Author to search: ");                String query = sc.nextLine();                library.search(query);            } else if (choice == 6) {                System.out.print("Enter Book ID: ");                int bookId = sc.nextInt();                System.out.print("New Availability (true/false): ");                boolean status = sc.nextBoolean();                library.updateAvailability(bookId, status);            } else if (choice == 7) {                library.displayForward();            } else if (choice == 8) {                library.displayReverse();            } else if (choice == 9) {                library.countBooks();            } else {                System.out.println("Invalid choice.");            }        }    }}