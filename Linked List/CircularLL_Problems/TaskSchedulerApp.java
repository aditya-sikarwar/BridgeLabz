package CircularLL_Problems;import java.util.Scanner;class Task {    int id;    String name;    int priority;    String dueDate;    Task next;    public Task(int id, String name, int priority, String dueDate) {        this.id = id;        this.name = name;        this.priority = priority;        this.dueDate = dueDate;        this.next = null;    }}class TaskScheduler {    private Task head = null;    private Task tail = null;    private Task current = null;    // Add task at beginning    public void addAtBeginning(int id, String name, int priority, String dueDate) {        Task newTask = new Task(id, name, priority, dueDate);        if (head == null) {            head = tail = newTask;            newTask.next = head;        } else {            newTask.next = head;            tail.next = newTask;            head = newTask;        }        if (current == null) current = head;        System.out.println("Task added at beginning.");    }    // Add task at end    public void addAtEnd(int id, String name, int priority, String dueDate) {        Task newTask = new Task(id, name, priority, dueDate);        if (head == null) {            head = tail = newTask;            newTask.next = head;        } else {            tail.next = newTask;            newTask.next = head;            tail = newTask;        }        if (current == null) current = head;        System.out.println("Task added at end.");    }    // Add at specific position    public void addAtPosition(int pos, int id, String name, int priority, String dueDate) {        if (pos <= 1 || head == null) {            addAtBeginning(id, name, priority, dueDate);            return;        }        Task newTask = new Task(id, name, priority, dueDate);        Task temp = head;        for (int i = 1; i < pos - 1 && temp.next != head; i++) {            temp = temp.next;        }        newTask.next = temp.next;        temp.next = newTask;        if (temp == tail) {            tail = newTask;        }        System.out.println("Task added at position " + pos);    }    // Remove task by ID    public void removeById(int id) {        if (head == null) {            System.out.println("Task list is empty.");            return;        }        Task temp = head, prev = tail;        boolean found = false;        do {            if (temp.id == id) {                found = true;                if (temp == head) {                    if (head == tail) { // single node                        head = tail = current = null;                    } else {                        head = head.next;                        tail.next = head;                    }                } else if (temp == tail) {                    tail = prev;                    tail.next = head;                } else {                    prev.next = temp.next;                }                if (current == temp) {                    current = current.next;                }                System.out.println("Task removed: " + id);                return;            }            prev = temp;            temp = temp.next;        } while (temp != head);        if (!found) System.out.println("Task ID not found.");    }    // View current task and move to next    public void viewCurrentAndNext() {        if (current == null) {            System.out.println("No tasks available.");            return;        }        System.out.println("Current Task:");        printTask(current);        current = current.next;    }    // Display all tasks from head    public void displayAllTasks() {        if (head == null) {            System.out.println("No tasks in the list.");            return;        }        System.out.println("All tasks:");        Task temp = head;        do {            printTask(temp);            temp = temp.next;        } while (temp != head);    }    // Search by priority    public void searchByPriority(int priority) {        if (head == null) {            System.out.println("No tasks available.");            return;        }        boolean found = false;        Task temp = head;        do {            if (temp.priority == priority) {                printTask(temp);                found = true;            }            temp = temp.next;        } while (temp != head);        if (!found) System.out.println("No tasks found with priority " + priority);    }    // Utility to print a task    private void printTask(Task task) {        System.out.println("ID: " + task.id + ", Name: " + task.name +                ", Priority: " + task.priority + ", Due: " + task.dueDate);    }}public class TaskSchedulerApp {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        TaskScheduler scheduler = new TaskScheduler();        while (true) {            System.out.println("\n--- Task Scheduler Menu ---");            System.out.println("1. Add Task at Beginning");            System.out.println("2. Add Task at End");            System.out.println("3. Add Task at Position");            System.out.println("4. Remove Task by ID");            System.out.println("5. View Current Task and Move to Next");            System.out.println("6. Display All Tasks");            System.out.println("7. Search Task by Priority");            System.out.println("8. Exit");            System.out.print("Enter your choice: ");            int choice = sc.nextInt();            sc.nextLine();  // Consume newline            if (choice == 8) {                System.out.println("Exiting...");                break;            }            if (choice >= 1 && choice <= 3) {                System.out.print("Enter Task ID: ");                int id = sc.nextInt();                sc.nextLine();                System.out.print("Enter Task Name: ");                String name = sc.nextLine();                System.out.print("Enter Priority: ");                int priority = sc.nextInt();                sc.nextLine();                System.out.print("Enter Due Date: ");                String due = sc.nextLine();                if (choice == 1)                    scheduler.addAtBeginning(id, name, priority, due);                else if (choice == 2)                    scheduler.addAtEnd(id, name, priority, due);                else {                    System.out.print("Enter Position: ");                    int pos = sc.nextInt();                    scheduler.addAtPosition(pos, id, name, priority, due);                }            } else if (choice == 4) {                System.out.print("Enter Task ID to remove: ");                int id = sc.nextInt();                scheduler.removeById(id);            } else if (choice == 5) {                scheduler.viewCurrentAndNext();            } else if (choice == 6) {                scheduler.displayAllTasks();            } else if (choice == 7) {                System.out.print("Enter Priority to search: ");                int priority = sc.nextInt();                scheduler.searchByPriority(priority);            } else {                System.out.println("Invalid choice.");            }        }    }}