package CircularLL_Problems;import java.util.*;class Process {    int pid, burstTime, remainingTime, priority;    int waitingTime = 0, turnaroundTime = 0;    Process next;    public Process(int pid, int burstTime, int priority) {        this.pid = pid;        this.burstTime = burstTime;        this.remainingTime = burstTime;        this.priority = priority;        this.next = null;    }}class RoundRobinScheduler {    private Process head = null, tail = null;    private final int timeQuantum;    public RoundRobinScheduler(int timeQuantum) {        this.timeQuantum = timeQuantum;    }    // Add process at end    public void addProcess(int pid, int burstTime, int priority) {        Process newProcess = new Process(pid, burstTime, priority);        if (head == null) {            head = tail = newProcess;            newProcess.next = head;        } else {            tail.next = newProcess;            newProcess.next = head;            tail = newProcess;        }        System.out.println("Process " + pid + " added.");    }    // Remove process by reference    private void removeProcess(Process prev, Process current) {        if (current == head && current == tail) {            head = tail = null;        } else {            if (current == head) head = head.next;            if (current == tail) tail = prev;            prev.next = current.next;        }    }    // Display current queue    public void displayQueue() {        if (head == null) {            System.out.println("No processes in queue.");            return;        }        Process temp = head;        System.out.println("Current Queue:");        do {            System.out.println("PID: " + temp.pid + ", Remaining Time: " + temp.remainingTime);            temp = temp.next;        } while (temp != head);    }    // Simulate round robin scheduling    public void simulate() {        if (head == null) {            System.out.println("No processes to schedule.");            return;        }        int time = 0;        List<Process> completed = new ArrayList<>();        Process current = head;        Process prev = tail;        while (head != null) {            if (current.remainingTime > 0) {                int execTime = Math.min(current.remainingTime, timeQuantum);                time += execTime;                current.remainingTime -= execTime;                if (current.remainingTime == 0) {                    current.turnaroundTime = time;                    current.waitingTime = time - current.burstTime;                    completed.add(current);                    System.out.println("Process " + current.pid + " completed at time " + time);                    removeProcess(prev, current);                    current = prev.next;                } else {                    prev = current;                    current = current.next;                }            } else {                current = current.next;            }            displayQueue();        }        // Display stats        System.out.println("\n--- Process Completion Info ---");        int totalWT = 0, totalTAT = 0;        for (Process p : completed) {            System.out.println("PID: " + p.pid + ", Waiting Time: " + p.waitingTime + ", Turnaround Time: " + p.turnaroundTime);            totalWT += p.waitingTime;            totalTAT += p.turnaroundTime;        }        System.out.printf("Average Waiting Time: %.2f\n", (double) totalWT / completed.size());        System.out.printf("Average Turnaround Time: %.2f\n", (double) totalTAT / completed.size());    }}public class RoundRobinApp {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        System.out.print("Enter Time Quantum: ");        int quantum = sc.nextInt();        RoundRobinScheduler scheduler = new RoundRobinScheduler(quantum);        while (true) {            System.out.println("\n--- Round Robin Menu ---");            System.out.println("1. Add Process");            System.out.println("2. Display Queue");            System.out.println("3. Start Scheduling");            System.out.println("4. Exit");            System.out.print("Choice: ");            int choice = sc.nextInt();            if (choice == 4) {                break;            }            switch (choice) {                case 1:                    System.out.print("Enter Process ID: ");                    int pid = sc.nextInt();                    System.out.print("Enter Burst Time: ");                    int bt = sc.nextInt();                    System.out.print("Enter Priority: ");                    int pr = sc.nextInt();                    scheduler.addProcess(pid, bt, pr);                    break;                case 2:                    scheduler.displayQueue();                    break;                case 3:                    scheduler.simulate();                    break;                default:                    System.out.println("Invalid choice.");            }        }    }}